/*
    _/_/_/                              _/_/          _/          _/_/                _/      
   _/    _/    _/_/      _/_/_/      _/    _/      _/  _/      _/    _/  _/_/_/    _/_/_/_/   
  _/    _/  _/    _/  _/    _/          _/        _/  _/      _/    _/  _/    _/    _/        
 _/    _/  _/    _/  _/    _/        _/          _/  _/      _/    _/  _/    _/    _/      
_/_/_/      _/_/      _/_/_/      _/_/_/_/  _/    _/          _/_/    _/    _/      _/_/
                         _/
                    _/_/

WEBSITE: http://elite.polito.it/dogont-tools-80
Copyright [2013] [Dario Bonino, Luigi De Russis, Emiliano Castellina (dario.bonino, luigi.derussis, emiliano.castellina{@polito.it}), Politecnico di Torino]
Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
 *//*Automatically generated byit.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog */

package it.polito.elite.dog.core.library.model.devicemodel;

/**
 * DogMovementAndTemperatureSensorModel - automatically generated by DogOnt2Dog
 */

import it.polito.elite.dog.core.library.model.devicecategory.MovementAndTemperatureSensor;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import it.polito.elite.dog.core.library.model.state.*;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;

public class DogMovementAndTemperatureSensor extends AbstractDevice implements
		MovementAndTemperatureSensor
{

	public DogMovementAndTemperatureSensor(BundleContext context,
			DeviceDescriptor dogDeviceDescriptor)
	{
		super(context);

		this.setDeviceProperties(dogDeviceDescriptor);

		this.registerDevice(Device.class.getName());
	}

	public Measure<?, ?> getTemperature()
	{
		if (this.driver != null)
		{
			return ((MovementAndTemperatureSensor) this.driver)
					.getTemperature();
		}
		return null;
	}

	public DeviceStatus getState()
	{
		if (this.driver != null)
		{
			return ((MovementAndTemperatureSensor) this.driver).getState();
		}
		return null;
	}

	public void deleteGroup(String groupID)
	{
		if (this.driver != null)
		{
			((MovementAndTemperatureSensor) this.driver).deleteGroup(groupID);
		}
	}

	public void storeGroup(String groupID)
	{
		if (this.driver != null)
		{
			((MovementAndTemperatureSensor) this.driver).storeGroup(groupID);
		}
	}

	/* Generated Notifications */

	/**
	 * /* Implements the DeviceCategory interface requirement
	 **/
	@Override
	public void notifyStateChanged(State newState)
	{
		super.notifyStateChanged(newState);
	}

	/* Notification: TemperatureMeasurementNotification */
	public void notifyNewTemperatureValue(Measure<?, ?> temperatureValue)
	{
		TemperatureMeasurementNotification notificationEvent = new TemperatureMeasurementNotification(
				temperatureValue);
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	/* Notification: MovementCeasedNotification */
	public void notifyCeasedMovement()
	{
		MovementCeasedNotification notificationEvent = new MovementCeasedNotification();
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	/* Notification: MovementDetectedNotification */
	public void notifyDetectedMovement()
	{
		MovementDetectedNotification notificationEvent = new MovementDetectedNotification();
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
}
