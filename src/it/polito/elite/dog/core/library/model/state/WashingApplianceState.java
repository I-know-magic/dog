/*
 * Dog - Core
 *
 * Copyright (c) 2011-2014 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.state;


import it.polito.elite.dog.core.library.model.statevalue.FailureStateValue;
import it.polito.elite.dog.core.library.model.statevalue.PauseStateValue;
import it.polito.elite.dog.core.library.model.statevalue.ProgramInterruptedStateValue;
import it.polito.elite.dog.core.library.model.statevalue.StandByStateValue;
import it.polito.elite.dog.core.library.model.statevalue.RunningStateValue;
import it.polito.elite.dog.core.library.model.statevalue.RinseHoldStateValue;
import it.polito.elite.dog.core.library.model.statevalue.OffStateValue;
import it.polito.elite.dog.core.library.model.statevalue.InServiceStateValue;
import it.polito.elite.dog.core.library.model.statevalue.ProgrammedStateValue;
import it.polito.elite.dog.core.library.model.statevalue.ProgrammedAndWaitingToStartStateValue;
import it.polito.elite.dog.core.library.model.statevalue.IdleStateValue;
import it.polito.elite.dog.core.library.model.statevalue.StateValue;


import it.polito.elite.dog.core.library.model.statevalue.EndProgrammedStateValue;



/**
* WashingApplianceState - automatically generated by it.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog
*
* @author it.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog
*
*/
public class WashingApplianceState extends GenericApplianceState
{
	/**
	 * The unique class version for serialization
	 */

	private static final long serialVersionUID = 1L;

	public static final String PAUSE = "pause";
	public static final String FAILURE = "failure";
	public static final String STANDBY = "standBy";
	public static final String RINSEHOLD = "rinseHold";
	public static final String IDLE = "idle";
	public static final String ENDPROGRAMMED = "endProgrammed";
	public static final String PROGRAMMEDANDWAITINGTOSTART = "programmedAndWaitingToStart";
	public static final String PROGRAMINTERRUPTED = "programInterrupted";
	public static final String PROGRAMMED = "programmed";
	public static final String SERVICE = "service";
	public static final String OFF = "off";
	public static final String RUNNING = "running";


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(PauseStateValue pausestatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{pausestatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(FailureStateValue failurestatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{failurestatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(StandByStateValue standbystatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{standbystatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(RinseHoldStateValue rinseholdstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{rinseholdstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(IdleStateValue idlestatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{idlestatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(EndProgrammedStateValue endprogrammedstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{endprogrammedstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(ProgrammedAndWaitingToStartStateValue programmedandwaitingtostartstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{programmedandwaitingtostartstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(ProgramInterruptedStateValue programinterruptedstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{programinterruptedstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(ProgrammedStateValue programmedstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{programmedstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(InServiceStateValue inservicestatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{inservicestatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(OffStateValue offstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{offstatevalue});
	}


	/**
	 * Class constructor for states inheriting from DiscreteState.
	 */
	public WashingApplianceState(RunningStateValue runningstatevalue)
	{
		//call the super class constructor
		super(new StateValue[]{runningstatevalue});
	}

	@Deprecated
	private void initCommon()
	{
		this.old2NewMap.put(WashingApplianceState.PAUSE, new PauseStateValue());
		this.old2NewMap.put(WashingApplianceState.FAILURE, new FailureStateValue());
		this.old2NewMap.put(WashingApplianceState.STANDBY, new StandByStateValue());
		this.old2NewMap.put(WashingApplianceState.RINSEHOLD, new RinseHoldStateValue());
		this.old2NewMap.put(WashingApplianceState.IDLE, new IdleStateValue());
		this.old2NewMap.put(WashingApplianceState.ENDPROGRAMMED, new EndProgrammedStateValue());
		this.old2NewMap.put(WashingApplianceState.PROGRAMMEDANDWAITINGTOSTART, new ProgrammedAndWaitingToStartStateValue());
		this.old2NewMap.put(WashingApplianceState.PROGRAMINTERRUPTED, new ProgramInterruptedStateValue());
		this.old2NewMap.put(WashingApplianceState.PROGRAMMED, new ProgrammedStateValue());
		this.old2NewMap.put(WashingApplianceState.SERVICE, new InServiceStateValue());
		this.old2NewMap.put(WashingApplianceState.OFF, new OffStateValue());
		this.old2NewMap.put(WashingApplianceState.RUNNING, new RunningStateValue());
	}
	/**
	 * Creates a state object in the Dog2.0 old way (before May 2012).
	 * 
	 * @param valueOfTheCurrentStateValue
	 */
	@Deprecated
	public WashingApplianceState(Object valueOfTheCurrentStateValue)
	{
		this.initCommon();
		this.valueOfTheCurrentStateValue = valueOfTheCurrentStateValue;
		if(valueOfTheCurrentStateValue instanceof String)
		{
			this.currentStateValue[0]=this.old2NewMap.get((String)valueOfTheCurrentStateValue);
		}
	}
	/**
	 * Class constructor.
	 */
	public WashingApplianceState(StateValue... currentStateValue)
	{
		super(currentStateValue);
	}

	/**
	 * Default constructor.
	 */
	public WashingApplianceState()
	{
		super();
	}
}
