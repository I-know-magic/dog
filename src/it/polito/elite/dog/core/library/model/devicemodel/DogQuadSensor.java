/*
 * Dog - Core
 * 
 * Copyright (c) 2011-2013 Dario Bonino and Luigi De Russis
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
//Automatically generated by it.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
 /**
* DogQuadSensorModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.devicecategory.QuadSensor;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.state.State;

import it.polito.elite.dog.core.library.model.notification.HumidityMeasurementNotification;
import it.polito.elite.dog.core.library.model.notification.TemperatureMeasurementNotification;
import it.polito.elite.dog.core.library.model.notification.MovementCeasedNotification;
import it.polito.elite.dog.core.library.model.notification.MovementDetectedNotification;
import it.polito.elite.dog.core.library.model.notification.LuminosityMeasurementNotification;

import javax.measure.Measure;

import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;



public class DogQuadSensor extends AbstractDevice implements QuadSensor
{

	public DogQuadSensor(BundleContext context, DeviceDescriptor dogDeviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(dogDeviceDescriptor);


		this.registerDevice(Device.class.getName());
	}

	@Override
	public Measure<?,?>  getRelativeHumidity()
	{
		if(this.driver!=null){
		return ((QuadSensor) this.driver).getRelativeHumidity();
		}
		 return null;
	}

	@Override
	public Measure<?,?>  getTemperature()
	{
		if(this.driver!=null){
		return ((QuadSensor) this.driver).getTemperature();
		}
		 return null;
	}
	
	@Override
	public Measure<?, ?> getLuminance()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DeviceStatus getState()
	{
		if(this.driver!=null){
		return ((QuadSensor) this.driver).getState();
		}
		 return null;
	}

	public void deleteGroup(String groupID)
	{
		if(this.driver!=null){
((QuadSensor) this.driver).deleteGroup(groupID);
		}
	}

	public void storeGroup(String groupID)
	{
		if(this.driver!=null){
((QuadSensor) this.driver).storeGroup(groupID);
		}
	}



	/*Generated Notifications*/

	/**
	/* Implements the DeviceCategory interface requirement 
	**/
	@Override
	public void notifyStateChanged(State newState)
	{
		super.notifyStateChanged(newState);
	}
	/*Notification: LuminosityMeasurementNotification*/
	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue){
		LuminosityMeasurementNotification notificationEvent=new LuminosityMeasurementNotification(luminosityValue );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: TemperatureMeasurementNotification*/
	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue){
		TemperatureMeasurementNotification notificationEvent=new TemperatureMeasurementNotification(temperatureValue );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: HumidityMeasurementNotification*/
	public void notifyChangedRelativeHumidity(Measure<?,?>  relativeHumidity){
		HumidityMeasurementNotification notificationEvent=new HumidityMeasurementNotification(relativeHumidity );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: MovementCeasedNotification*/
	public void notifyCeasedMovement(){
		MovementCeasedNotification notificationEvent=new MovementCeasedNotification();
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: MovementDetectedNotification*/
	public void notifyDetectedMovement(){
		MovementDetectedNotification notificationEvent=new MovementDetectedNotification();
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}


	
}
