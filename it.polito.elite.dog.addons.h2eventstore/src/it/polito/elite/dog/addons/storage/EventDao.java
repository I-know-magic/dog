/*
 * Dog - Addons
 * 
 * Copyright (c) 2013-2014 Claudio Degioanni, Luigi De Russis, Dario Bonino
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
package it.polito.elite.dog.addons.storage;

import java.util.Date;

import javax.measure.DecimalMeasure;
import javax.measure.Measure;

/**
 * An interface defining common methods for accessing data stored in Dog event
 * stores, i.e., bundles offering the {@link EventStore} service.
 * 
 * @author <a href="mailto:claudiodegio@gmail.com">Claudio Degioanni</a> (first
 *         version)
 * @author <a href="mailto:luigi.derussis@polito.it">Luigi De Russis</a> (minor
 *         editing)
 * @author <a href="mailto:dario.bonino@polito.it">Dario Bonino</a> (second
 *         version)
 * 
 */
public interface EventDao
{
	/**
	 * Insert the event in the persistent storage. If the given device URI
	 * identifies a device seen for the first time, create a new entry in the
	 * proper db table.
	 * 
	 * @param deviceURI
	 *            The URI of the Device generating the event
	 * @param eventTimestamp
	 *            The event time stamp as a {@link Date} instance.
	 * @param eventValue
	 *            The event value as a {@link DecimalMeasure} instance.
	 * @param eventType
	 *            The event type, i.e., notification,...
	 * @param notificationName
	 *            The notification name as a {@link String} instance.
	 * @param notificationParams
	 *            The notification params as a post-like encoded
	 *            (name=value&name=value...) {@link String} instance.
	 * @throws SQLException
	 */
	public boolean insertMeasure(String deviceURI, Date eventTimestamp,
			Measure<?, ?> eventValue, String notificationName,
			String notificationParams);

	/**
	 * Insert the event in the persistent storage. If the given device URI
	 * identifies a device seen for the first time, create a new entry in the
	 * proper db table.
	 * 
	 * @param deviceURI
	 *            The URI of the Device generating the event
	 * @param eventTimestamp
	 *            The event time stamp as a {@link Date} instance.
	 * @param eventValue
	 *            The event value as a {@link String} instance.
	 * @param name
	 *            The notification / event name
	 * @return
	 */
	boolean insertEvent(String deviceURI, Date eventTimestamp,
			String eventValue, String name);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 */
	public EventDataStreamSet getAllDeviceMeasures(String deviceURI,
			Date startDate, Date endDate, int startCount, int nResults);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 * @param aggregated
	 *            true if events should be aggregated in a single event stream,
	 *            false to get one event stream for each notification type
	 */
	public EventDataStreamSet getAllDeviceEvents(String deviceURI,
			Date startDate, Date endDate, int startCount, int nResults,
			boolean aggregated);

	/**
	 * Gets all the events corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and endDate, using pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which events must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 * @return
	 */
	public EventDataStream getSpecificDeviceMeasure(String deviceURI,
			String notificationName, String notificationParams, Date startDate,
			Date endDate, int startCount, int nResults);

	public boolean close();

}
