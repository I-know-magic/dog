/**
 * 
 */
package it.polito.elite.dog.addons.storage;

import java.util.Date;
import java.util.Map;
import java.util.Set;

/**
 * @author bonino
 * 
 */
public interface EventStore
{
	/**
	 * Gets all the measures generated by a given device in the time frame
	 * between startDate and endDate
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 */
	public EventDataStreamSet getAllDeviceContinuousNotifications(String deviceURI,
			Date startDate, Date endDate);

	/**
	 * Gets all the measures generated by a given device in the time frame
	 * between startDate and endDate using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 */
	public EventDataStreamSet getAllDeviceContinuousNotifications(String deviceURI,
			Date startDate, Date endDate, int startCount, int nResults);

	/**
	 * Gets all the measures generated by a given device in the time frame
	 * between startDate and the instant in which the method is called
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 */
	public EventDataStreamSet getAllDeviceContinuousNotifications(String deviceURI,
			Date startDate);

	/**
	 * Gets all the measures generated by a given device in the time frame
	 * between startDate and the instant in which the method is called using
	 * pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 */
	public EventDataStreamSet getAllDeviceContinuousNotifications(String deviceURI,
			Date startDate, int startCount, int nResults);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param aggregated
	 *            true if events should be aggregated in a single event stream,
	 *            false to get one event stream for each notification type           
	 *      
	 */
	public EventDataStreamSet getAllDeviceDiscreteNotifications(String deviceURI,
			Date startDate, Date endDate, boolean aggregated);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 * @param aggregated
	 *            true if events should be aggregated in a single event stream,
	 *            false to get one event stream for each notification type
	 */
	public EventDataStreamSet getAllDeviceDiscreteNotifications(String deviceURI,
			Date startDate, Date endDate, int startCount, int nResults,
			boolean aggregated);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and the instant in which the method is called
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param aggregated
	 *            true if events should be aggregated in a single event stream,
	 *            false to get one event stream for each notification type
	 */
	public EventDataStreamSet getAllDeviceDiscreteNotifications(String deviceURI,
			Date startDate, boolean aggregated);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and the instant in which the method is called using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 * @param aggregated
	 *            true if events should be aggregated in a single event stream,
	 *            false to get one event stream for each notification type
	 */
	public EventDataStreamSet getAllDeviceDiscreteNotifications(String deviceURI,
			Date startDate, int startCount, int nResults, boolean aggregated);

	/**
	 * Gets all the measures corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and endDate.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 */
	public EventDataStream getSpecificDeviceContinuousNotifications(String deviceURI,
			String notificationName, String notificationParams, Date startDate,
			Date endDate);

	/**
	 * Gets all the measures corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and endDate, using pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getSpecificDeviceContinuousNotifications(String deviceURI,
			String notificationName, String notificationParams, Date startDate,
			Date endDate, int startCount, int nResults);

	/**
	 * Gets all the measures corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and the instant in which the method is called.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 */
	public EventDataStream getSpecificDeviceContinuousNotifications(String deviceURI,
			String notificationName, String notificationParams, Date startDate);

	/**
	 * Gets all the measures corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and the instant in which the method is called, using
	 * pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getSpecificDeviceContinuousNotifications(String deviceURI,
			String notificationName, String notificationParams, Date startDate,
			int startCount, int nResults);
	
	/**
	 * Gets all the events corresponding to the given notification in the time frame between
	 * startDate and endDate.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 */
	public EventDataStream getSpecificDeviceDiscreteNotifications(String deviceURI,
			String notificationName, Date startDate,
			Date endDate);

	/**
	 * Gets all the events corresponding to the given notification in the time frame between
	 * startDate and endDate, using pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getSpecificDeviceDiscreteNotifications(String deviceURI,
			String notificationName, Date startDate,
			Date endDate, int startCount, int nResults);

	/**
	 * Gets all the measures corresponding to the given notification in the time frame between
	 * startDate and the instant in which the method is called.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 */
	public EventDataStream getSpecificDeviceDiscreteNotifications(String deviceURI,
			String notificationName, Date startDate);

	/**
	 * Gets all the measures corresponding to the given notification in the time frame between
	 * startDate and the instant in which the method is called, using
	 * pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which measures must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getSpecificDeviceDiscreteNotifications(String deviceURI,
			String notificationName, Date startDate,
			int startCount, int nResults);
	
	
	/**
	 * Gets all the events corresponding to the given set of notifications,
	 * aggregated as a single event stream, in the time frame between startDate
	 * and endDate, using pagination.
	 * 
	 * @param deviceURI  The deviceURI as a{@link String}
	 * @param notificationNames The names of the notifications for which events must be
	 *            retrieved
	 * @param startDate The start date.
	 * @param endDate The end date.
	 * @param startCount The starting count.
	 * @param nResults The number of results to provide back.
	 * @return
	 */
	public EventDataStream getSpecificDeviceDiscreteNotifications(String deviceURI,
			Set<String> notificationNames, String eventStreamName, Date startDate, Date endDate,
			int startCount, int nResults);
	
	/**
	 * Gets all the events corresponding to the each set of notifications in the given map,
	 * aggregated as a single event stream, in the time frame between startDate
	 * and endDate, using pagination
	 * @param deviceURI
	 * @param notificationNames
	 * @param startDate
	 * @param endDate
	 * @param startCount
	 * @param nResults
	 * @return
	 */
	public EventDataStreamSet getSpecificDeviceDiscreteNotifications(String deviceURI,
			Map<String,Set<String>> notificationNames, Date startDate, Date endDate,
			int startCount, int nResults);

}
