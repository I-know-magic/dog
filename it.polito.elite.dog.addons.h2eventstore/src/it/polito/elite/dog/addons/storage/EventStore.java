/**
 * 
 */
package it.polito.elite.dog.addons.storage;

import java.util.Date;

/**
 * @author bonino
 * 
 */
public interface EventStore
{
	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 */
	public EventDataStreamSet getAllDeviceEvents(String deviceURI, Date startDate,
			Date endDate);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and endDate using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param endDate
	 *            the end date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 */
	public EventDataStreamSet getAllDeviceEvents(String deviceURI, Date startDate,
			Date endDate, int startCount, int nResults);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and the instant in which the method is called
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 */
	public EventDataStreamSet getAllDeviceEvents(String deviceURI, Date startDate);

	/**
	 * Gets all the events generated by a given device in the time frame between
	 * startDate and the instant in which the method is called using pagination
	 * 
	 * @param deviceURI
	 *            the deviceURI as a{@link String}
	 * @param startDate
	 *            the start date
	 * @param startCount
	 *            the starting count
	 * @param nResults
	 *            the number of results to provide back
	 */
	public EventDataStreamSet getAllDeviceEvents(String deviceURI, Date startDate,
			int startCount, int nResults);

	/**
	 * Gets all the events corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and endDate.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which events must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 */
	public EventDataStream getDeviceEvents(String deviceURI, String notificationName,
			String notificationParams, Date startDate, Date endDate);

	/**
	 * Gets all the events corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and endDate, using pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which events must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>;
	 * @param startDate
	 *            The start date.
	 * @param endDate
	 *            The end date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getDeviceEvents(String deviceURI, String notificationName,
			String notificationParams, Date startDate, Date endDate,
			int startCount, int nResults);

	/**
	 * Gets all the events corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and the instant in which the method is called.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which events must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 */
	public EventDataStream getDeviceEvents(String deviceURI, String notificationName,
			String notificationParams, Date startDate);

	/**
	 * Gets all the events corresponding to the given notification (including
	 * any restricting parameter, e.g., phaseId=1) in the time frame between
	 * startDate and the instant in which the method is called, using
	 * pagination.
	 * 
	 * @param deviceURI
	 *            The deviceURI as a{@link String}
	 * @param notificationName
	 *            The name of the notification for which events must be
	 *            retrieved
	 * @param notificationParams
	 *            The parameter values needed to further specify which
	 *            notification must be matched, in a post-like encoding
	 *            <code>name1=value1&name2=value2&...</code>
	 * @param startDate
	 *            The start date.
	 * @param startCount
	 *            The starting count
	 * @param nResults
	 *            The number of results to provide back
	 */
	public EventDataStream getDeviceEvents(String deviceURI, String notificationName,
			String notificationParams, Date startDate, int startCount,
			int nResults);

}
