/*
 * Dog - Core
 * 
 * Copyright (c) 2011-2013 Dario Bonino and Luigi De Russis
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
//Automatically generated by it.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog
//
package it.polito.elite.dog.core.library.model.devicemodel;

import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.devicecategory.PowerMeteringLevelControllableOutput;
import it.polito.elite.dog.core.library.model.notification.SinglePhaseActivePowerMeasurementNotification;
import it.polito.elite.dog.core.library.model.state.State;

import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;

/**
 * @author bonino
 * 
 */
public class DogPowerMeteringLevelControllableOutput extends AbstractDevice
		implements PowerMeteringLevelControllableOutput
{

	public DogPowerMeteringLevelControllableOutput(BundleContext context,
			DeviceDescriptor dogDeviceDescriptor)
	{
		super(context);

		this.setDeviceProperties(dogDeviceDescriptor);

		this.registerDevice(Device.class.getName());
	}

	@Override
	public void stepDown()
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver).stepDown();
		}
	}

	@Override
	public void stepUp()
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver).stepUp();
		}
	}

	@Override
	public DeviceStatus getState()
	{
		if (this.driver != null)
		{
			return ((PowerMeteringLevelControllableOutput) this.driver)
					.getState();
		}
		return null;
	}

	@Override
	public void storeScene(Integer sceneNumber)
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver)
					.storeScene(sceneNumber);
		}
	}

	@Override
	public void deleteScene(Integer sceneNumber)
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver)
					.deleteScene(sceneNumber);
		}
	}

	@Override
	public void set(Object value)
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver).set(value);
		}
	}

	@Override
	public void on()
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver).on();
		}
	}

	@Override
	public void deleteGroup(String groupID)
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver)
					.deleteGroup(groupID);
		}
	}

	@Override
	public Measure<?, ?> getActivePower()
	{
		if (this.driver != null)
		{
			return ((PowerMeteringLevelControllableOutput) this.driver)
					.getActivePower();
		}
		return null;
	}

	@Override
	public void storeGroup(String groupID)
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver)
					.storeGroup(groupID);
		}
	}

	@Override
	public void off()
	{
		if (this.driver != null)
		{
			((PowerMeteringLevelControllableOutput) this.driver).off();
		}
	}

	/* Generated Notifications */

	/* Notification: SinglePhaseActivePowerMeasurementNotification */
	@Override
	public void notifyNewActivePowerValue(Measure<?, ?> powerValue)
	{
		SinglePhaseActivePowerMeasurementNotification notificationEvent = new SinglePhaseActivePowerMeasurementNotification(
				powerValue);
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	/**
	 * /* Implements the DeviceCategory interface requirement
	 **/
	@Override
	public void notifyStateChanged(State newState)
	{
		super.notifyStateChanged(newState);
	}
}
