/*
    _/_/_/                              _/_/          _/          _/_/                _/      
   _/    _/    _/_/      _/_/_/      _/    _/      _/  _/      _/    _/  _/_/_/    _/_/_/_/   
  _/    _/  _/    _/  _/    _/          _/        _/  _/      _/    _/  _/    _/    _/        
 _/    _/  _/    _/  _/    _/        _/          _/  _/      _/    _/  _/    _/    _/      
_/_/_/      _/_/      _/_/_/      _/_/_/_/  _/    _/          _/_/    _/    _/      _/_/
                         _/
                    _/_/

WEBSITE: http://elite.polito.it/dogont-tools-80
Copyright [2013] [Dario Bonino, Luigi De Russis, Emiliano Castellina (dario.bonino, luigi.derussis, emiliano.castellina{@polito.it}), Politecnico di Torino]
Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
 *//*Automatically generated byit.polito.elite.domotics.ontologies.dogont.utilities.DogOnt2Dog */

package it.polito.elite.dog.core.library.model.devicemodel;

/**
 * DogThermostaticRadiatorValveModel - automatically generated by DogOnt2Dog
 */

import it.polito.elite.dog.core.library.model.climate.DailyClimateSchedule;
import it.polito.elite.dog.core.library.model.devicecategory.ThermostaticRadiatorValve;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import it.polito.elite.dog.core.library.model.state.*;

import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;

import javax.measure.Measure;

public class DogThermostaticRadiatorValve extends AbstractDevice implements
		ThermostaticRadiatorValve
{

	public DogThermostaticRadiatorValve(BundleContext context, DeviceDescriptor dogDeviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(dogDeviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public void setDailyClimateSchedule(DailyClimateSchedule daySchedule)
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).setDailyClimateSchedule(daySchedule);
		}
	}

	public DeviceStatus getState()
	{
		if(this.driver!=null){
		return ((ThermostaticRadiatorValve) this.driver).getState();
		}
		 return null;
	}

	public Object[] getDaySchedule(Integer weekDay)
	{
		if(this.driver!=null){
		return ((ThermostaticRadiatorValve) this.driver).getDaySchedule(weekDay);
		}
		 return null;
	}

	public void cool()
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).cool();
		}
	}

	public void stopHeatingOrCooling()
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).stopHeatingOrCooling();
		}
	}

	public void setTemperatureAt(Measure<?,?>  temperature)
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).setTemperatureAt(temperature);
		}
	}

	public void heat()
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).heat();
		}
	}

	public void setClimateSchedule(DailyClimateSchedule[] dailySchedules)
	{
		if(this.driver!=null){
((ThermostaticRadiatorValve) this.driver).setClimateSchedule(dailySchedules);
		}
	}



	/*Generated Notifications*/

	/**
	/* Implements the DeviceCategory interface requirement 
	**/
	@Override
	public void notifyStateChanged(State newState)
	{
		super.notifyStateChanged(newState);
	}
}
